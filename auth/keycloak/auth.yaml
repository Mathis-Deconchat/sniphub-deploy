################################
# oAuth2 - Proxy Secret 
# @Name : oauth2-proxy-maia
#################################
# ðŸ”” A realm and a oidc clien must be created on Keycloak to be able to get the client_id and secret
# ðŸ’¬ The cookie secret must be a complex password, use command below to generate one with bash
# dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_'; echo
apiVersion: v1
kind: Secret
metadata:
  name: oauth2-proxy
  namespace: sniphub
stringData:
  OAUTH2_PROXY_CLIENT_ID: "sniphub"
  OAUTH2_PROXY_CLIENT_SECRET: "qphIiZgchvq03xQU5oveHGCbMlJpjKwC" 
  OAUTH2_PROXY_COOKIE_SECRET: "6eKf2A4eDxZaV-ufek6_9kQDahSLHhqUVfVoWcihpAg="

---
################################
# oAuth2 - Proxy Service
# @Name : oauth2-proxy-service
#################################
# ðŸ’¬ Expose oauth2-proxy app
apiVersion: v1
kind: Service
metadata:
  name: oauth2-proxy
  namespace: sniphub
spec:
  selector:
    app: oauth2-proxy
  ports:
  - name: http
    port: 4180
---
################################
# oAuth2 - Proxy Deployment 
# @Name : oauth2-proxy
#################################
# ðŸ’¬ All parameters found in spec.template.spec.args can be found on the link below
# ðŸ’¬ https://oauth2-proxy.github.io/oauth2-proxy/docs/6.1.x/configuration/overview
# ðŸ’¬ The proxy is deployed in the same namespace as the application
# ðŸ’¬ To be able to be used as a provider, this proxy has to be declared in the 'isitio' configmap within the namespace 'istio-system'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth2-proxy
  namespace: sniphub
spec:
  selector:
    matchLabels:
      app: oauth2-proxy
  template:
    metadata:
      labels:
        app: oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: bitnami/oauth2-proxy:7.3.0
        args:
        - --provider=oidc
        - --provider-display-name="Keycloak"
        - --email-domain=*
        - --pass-access-token=true
        - --pass-authorization-header=true
        - --set-authorization-header=true
        # - --set-xauthrequest=true
        - --skip-jwt-bearer-tokens=true
        - --redirect-url=https://sniphub.darmanin.info/oauth2/callback
        - --oidc-issuer-url=https://auth.darmanin.info/auth/realms/sniphub
        - --login-url=https://auth.darmanin.info/auth/realms/sniphub/protocol/openid-connect/auth
        - --redeem-url=https://auth.darmanin.info/auth/realms/sniphub/protocol/openid-connect/token
        - --validate-url=https://auth.darmanin.info/auth/realms/sniphub/protocol/openid-connect/userinfo
        - --http-address=0.0.0.0:4180
        - --cookie-expire=4h0m0s        
        - --cookie-refresh=0h2m0s
        - --cookie-secure=false
        - --whitelist-domain=".darmanin.info"
        - --cookie-domain=".darmanin.info"
        - --standard-logging=true
        - --auth-logging=true
        - --request-logging=true
        - --skip-provider-button=true
        - --upstream=static://200
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy
              key: OAUTH2_PROXY_CLIENT_ID
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy
              key: OAUTH2_PROXY_CLIENT_SECRET
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy
              key: OAUTH2_PROXY_COOKIE_SECRET
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        ports:
        - containerPort: 4180
          protocol: TCP
        # readinessProbe:
        #   periodSeconds: 3
        #   httpGet:
        #     path: /ping
        #     port: 4180
# ---



---
################################
# Request Authentication
# @Name : req-auth-for-all
#################################
# ðŸ’¬ https://istio.io/latest/docs/reference/config/security/request_authentication/
# ðŸ’¬ All pods with a label 'auth : maia' will use this jwtRules 
# ðŸ’¬ 'outputPayloadToHeader' and 'forwardOriginalToken' allow maia apps to read data from the x-id-token
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: snip-request-auth
  namespace: sniphub
spec:
  selector: 
    matchLabels:
      snip-auth: "true"
  jwtRules:  
  - issuer: "https://auth.darmanin.info/auth/realms/sniphub"
    jwksUri: "https://auth.darmanin.info/auth/realms/sniphub/protocol/openid-connect/certs"
    forwardOriginalToken: true
    outputPayloadToHeader: x-id-token


---
################################
# Authorization Policy
# @Name : istio-ingressgateway-auth
#################################   
# ðŸ’¬ https://istio.io/latest/docs/reference/config/security/authorization-policy/
# ðŸ’¬ Uses the oauth2 provider build before (the name set in istio config map)

apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: auth-policy-front
  namespace: sniphub
spec:
  selector:
    matchLabels:
      snip-auth: "true"
  action: CUSTOM
  provider:
    name: oauth2-proxy
  rules:
    - {}

---
